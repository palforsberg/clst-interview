/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package io.clearstreet.swdn;

import static io.clearstreet.swdn.Fixtures.IBM_STOCK;
import static io.clearstreet.swdn.Fixtures.JP_MORGAN;
import static io.clearstreet.swdn.Fixtures.JP_MORGAN_ACCOUNT_1;
import static io.clearstreet.swdn.Fixtures.JP_MORGAN_ACCOUNT_2;

import io.clearstreet.swdn.model.Position;
import io.clearstreet.swdn.model.Price;
import io.clearstreet.swdn.model.Trade;
import io.clearstreet.swdn.model.TradeSide;
import io.clearstreet.swdn.model.TradeType;
import java.util.List;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;

class AppTest {

  public static final double DELTA = 0.0001;

  @Test
  void singleTradePnl() {
    // Given
    App app = new App();
    Assertions.assertTrue(app.getReferenceDataApi().enterInstrument(IBM_STOCK));
    Assertions.assertTrue(app.getReferenceDataApi().enterMember(JP_MORGAN));
    Assertions.assertTrue(app.getReferenceDataApi().enterAccount(JP_MORGAN_ACCOUNT_1));
    Assertions.assertTrue(
        app.getPriceApi().enterPrice(new Price(IBM_STOCK.instrumentName(), 100.0)));

    // When
    Trade trade1 = new Trade("trade1",
        JP_MORGAN_ACCOUNT_1.accountName(),
        IBM_STOCK.instrumentName(),
        200.0,
        TradeSide.BUY,
        TradeType.NEW,
        99.0);
    Assertions.assertTrue(app.getTradeApi().enterTrade(trade1));
    double accountPnl = app.getRiskApi().calculateAccountPnl(JP_MORGAN_ACCOUNT_1.accountName());
    List<Position> positions = app.getPositionApi()
        .getPositionsForAccount(JP_MORGAN_ACCOUNT_1.accountName());

    // Then
    Assertions.assertEquals(200.0, accountPnl, DELTA);
    Assertions.assertEquals(1, positions.size());
    Assertions.assertEquals(trade1.quantity(), positions.get(0).quantity(), DELTA);
    Assertions.assertEquals(trade1.quantity() * trade1.price(), positions.get(0).initialValue(),
        DELTA);
  }

  @Test
  void twoTradesSameMemberPnl() {
    // Given
    App app = new App();
    Assertions.assertTrue(app.getReferenceDataApi().enterInstrument(IBM_STOCK));
    Assertions.assertTrue(app.getReferenceDataApi().enterMember(JP_MORGAN));
    Assertions.assertTrue(app.getReferenceDataApi().enterAccount(JP_MORGAN_ACCOUNT_1));
    Assertions.assertTrue(app.getReferenceDataApi().enterAccount(JP_MORGAN_ACCOUNT_2));
    Assertions.assertTrue(
        app.getPriceApi().enterPrice(new Price(IBM_STOCK.instrumentName(), 100.0)));

    // When
    Trade trade1 = new Trade("trade1",
        JP_MORGAN_ACCOUNT_1.accountName(),
        IBM_STOCK.instrumentName(),
        200.0,
        TradeSide.BUY,
        TradeType.NEW,
        99.0);
    Trade trade2 = new Trade("trade2",
        JP_MORGAN_ACCOUNT_2.accountName(),
        IBM_STOCK.instrumentName(),
        100.0,
        TradeSide.SELL,
        TradeType.NEW,
        99.5);
    Assertions.assertTrue(app.getTradeApi().enterTrade(trade1));
    Assertions.assertTrue(app.getTradeApi().enterTrade(trade2));
    double accountPnl = app.getRiskApi().calculateMemberPnl(JP_MORGAN.memberName());
    List<Position> positions = app.getPositionApi()
        .getPositionsForMember(JP_MORGAN.memberName());

    // Then
    Assertions.assertEquals(150.0, accountPnl, DELTA);
    Assertions.assertEquals(1, positions.size());
    Assertions.assertEquals(100.0, positions.get(0).quantity(), DELTA);
    Assertions.assertEquals(9850.0, positions.get(0).initialValue(),
        DELTA);
  }

  /**
   * This test is designed to test that the system recovers successfully after a failure.
   */
  @Test
  void recoveryTest() {
    // Given
    double quantity = 200.0;
    double price = 99.0;
    {
      App app = new App();
      Assertions.assertTrue(app.getReferenceDataApi().enterInstrument(IBM_STOCK));
      Assertions.assertTrue(app.getReferenceDataApi().enterMember(JP_MORGAN));
      Assertions.assertTrue(app.getReferenceDataApi().enterAccount(JP_MORGAN_ACCOUNT_1));
      Assertions.assertTrue(
          app.getPriceApi().enterPrice(new Price(IBM_STOCK.instrumentName(), 100.0)));
      Trade trade1 = new Trade("trade1",
          JP_MORGAN_ACCOUNT_1.accountName(),
          IBM_STOCK.instrumentName(),
          quantity,
          TradeSide.BUY,
          TradeType.NEW,
          price);
      Assertions.assertTrue(app.getTradeApi().enterTrade(trade1));
    }

    // When
    // Simulate a crash
    App app = new App();
    double accountPnl = app.getRiskApi().calculateAccountPnl(JP_MORGAN_ACCOUNT_1.accountName());
    List<Position> positions = app.getPositionApi()
        .getPositionsForAccount(JP_MORGAN_ACCOUNT_1.accountName());

    // Then
    Assertions.assertEquals(quantity, accountPnl, DELTA);
    Assertions.assertEquals(1, positions.size());
    Assertions.assertEquals(quantity, positions.get(0).quantity(), DELTA);
    Assertions.assertEquals(quantity * price, positions.get(0).initialValue(),
        DELTA);
  }

}
